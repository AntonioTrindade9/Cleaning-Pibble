// Indica se o Pibble ainda est√° sujo (controle do jogo)
let dirty = true; 

function main() {
  // Aguarda o carregamento completo do DOM antes de executar o c√≥digo
  document.addEventListener("DOMContentLoaded", function () {
    // Seleciona os elementos principais do jogo
    const dirt = document.getElementById("dirt");      // Sujeira sobre o Pibble
    const bubble = document.getElementById("bubble");  // Espuma que aparece ao limpar
    const water = document.getElementById("water");    // √Ågua que aparece ao enxaguar
    const utensils = [
      document.getElementById("soap"),                 // Sab√£o
      document.getElementById("shower"),               // Chuveiro
      document.getElementById("towel"),                // Toalha
    ];

    // Vari√°veis para controle do arrasto e opacidade dos elementos
    let offsetX, offsetY, isDragging = false, currentUtensil = null;
    let dirtOpacity = 1.0, bubbleOpacity = 0, waterOpacity = 0;

    // Adiciona evento de arrastar para cada utens√≠lio
    utensils.forEach(utensil => {
      if (!utensil) return; // Ignora utens√≠lios n√£o encontrados

      // Quando o usu√°rio clica para arrastar o utens√≠lio
      utensil.addEventListener("mousedown", startDrag);
    });

    // Evento para quando o usu√°rio solta o mouse (termina o arrasto)
    document.addEventListener("mouseup", stopDrag);

    // Evento para movimentar o utens√≠lio enquanto arrasta
    document.addEventListener("mousemove", moveUtensil);

    // Fun√ß√£o chamada ao iniciar o arrasto de um utens√≠lio
    function startDrag(e) {
      if (!dirty) return; // N√£o faz nada se o Pibble j√° estiver limpo
      isDragging = true; // Ativa o modo de arrasto
      currentUtensil = e.target; // Guarda o utens√≠lio atual
      offsetX = e.clientX - currentUtensil.offsetLeft; // Calcula o deslocamento X
      offsetY = e.clientY - currentUtensil.offsetTop;  // Calcula o deslocamento Y
      currentUtensil.style.position = "absolute";      // Muda para posi√ß√£o absoluta durante o arrasto
      currentUtensil.style.zIndex = 10;                // Garante que fique acima dos outros elementos
      currentUtensil.style.cursor = "grabbing";        // Muda o cursor para "grabbing"
    }

    // Fun√ß√£o chamada ao soltar o utens√≠lio
    function stopDrag() {
      if (currentUtensil) {
        currentUtensil.style.cursor = "grab";     // Volta o cursor para "grab"
        currentUtensil.style.zIndex = "";         // Remove o z-index extra
        currentUtensil.style.position = "";       // Volta para o layout original do flexbox
        currentUtensil.style.left = "";           // Remove a posi√ß√£o X
        currentUtensil.style.top = "";            // Remove a posi√ß√£o Y
      }
      isDragging = false;       // Desativa o modo de arrasto
      currentUtensil = null;    // Limpa o utens√≠lio atual
    }

    // Fun√ß√£o chamada enquanto arrasta o utens√≠lio
    function moveUtensil(e) {
      if (!isDragging || !currentUtensil || !dirty) return; // S√≥ executa se estiver arrastando e sujo

      // Calcula nova posi√ß√£o do utens√≠lio
      const x = e.clientX - offsetX;
      const y = e.clientY - offsetY;
      currentUtensil.style.left = x + "px";
      currentUtensil.style.top = y + "px";

      // Sab√£o faz a sujeira sumir e a espuma aparecer
      if (currentUtensil.id === "soap" &&
        checkCollision(currentUtensil.getBoundingClientRect(), dirt.getBoundingClientRect())) {
        dirtOpacity = Math.max(0, dirtOpacity - 0.01); // Diminui a opacidade da sujeira
        dirt.style.opacity = dirtOpacity;
        bubbleOpacity = Math.min(1, bubbleOpacity + 0.01); // Aumenta a opacidade da espuma
        bubble.style.opacity = bubbleOpacity;
      }

      // Chuveiro faz a espuma sumir e aparece √°gua
      if (currentUtensil.id === "shower" &&
        checkCollision(currentUtensil.getBoundingClientRect(), bubble.getBoundingClientRect())) {
        bubbleOpacity = Math.max(0, bubbleOpacity - 0.02); // Diminui a opacidade da espuma
        bubble.style.opacity = bubbleOpacity;
        waterOpacity = Math.min(1, waterOpacity + 0.02);   // Aumenta a opacidade da √°gua
        water.style.opacity = waterOpacity;
      }

      // Toalha faz a √°gua sumir
      if (currentUtensil.id === "towel" &&
        checkCollision(currentUtensil.getBoundingClientRect(), water.getBoundingClientRect())) {
        waterOpacity = Math.max(0, waterOpacity - 0.02); // Diminui a opacidade da √°gua
        water.style.opacity = waterOpacity;

        // Verifica se todos os elementos est√£o limpos/invis√≠veis
        if (dirtOpacity === 0 && bubbleOpacity === 0 && waterOpacity === 0) {
          dirty = false; // Marca como limpo
          endGame();     // Chama fun√ß√£o de fim de jogo
        }
      }
    }

    // Fun√ß√£o para verificar colis√£o entre dois elementos (ret√¢ngulos)
    function checkCollision(rect1, rect2) {
      return !(rect1.right < rect2.left ||
        rect1.left > rect2.right ||
        rect1.bottom < rect2.top ||
        rect1.top > rect2.bottom);
    }

    // Fun√ß√£o chamada quando o Pibble est√° limpo
    function endGame() {
      console.log("‚ú® O Pibble est√° limpinho! ‚ú®");

      // Remove todos os eventos para ‚Äúparar o jogo‚Äù
      utensils.forEach(u => u.removeEventListener("mousedown", startDrag));
      document.removeEventListener("mouseup", stopDrag);
      document.removeEventListener("mousemove", moveUtensil);

      // Mostra mensagem final
      alert("O Pibble est√° limpo! üòÑ");
    }
  });
}

// Inicia o jogo apenas se o Pibble estiver sujo
if (dirty) { 
    alert("Pibble est√° sujo, limpe-o! üßº");
  main();
} else {
    console.log("O Pibble j√° est√° limpo!");
}